[General]
cmdenv-express-mode = true
cmdenv-autoflush = true
cmdenv-status-frequency = 1s
**.cmdenv-log-level = info
repeat = 10
seed-set = ${repetition}
#################################################################
#                      ! IMPORTANT NOTICE !                     #
#                                                               #
#    result-recording-modes needs to be default at the moment   #
#    because there is a signal in veins_inet that cause the     #
#    crash of the application. So to ensure the correct         #
#    behavior of the application do not modify the parameter    #
#    below                                                      #
#################################################################
**.result-recording-modes = default
*.worker[*].app[0].**.vector-recording = true
*.worker[*].app[1].**.vector-recording = true
*.generator[*].app[0].**.vector-recording = true
*.generator[*].wlan[*].mac.**.vector-recording = true
*.worker[*].wlan[*].mac.**.vector-recording = true
*.worker[*].app[0].**.result-recording-modes = all
*.worker[*].app[1].**.result-recording-modes = all
*.generator[*].app[0].**.result-recording-modes = all
image-path = ../../images

network = task_offloading

##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = true
print-undisposed = true

**.scalar-recording = true
**.vector-recording = false

*.playgroundSizeX = 3500m
*.playgroundSizeY = 3500m
*.playgroundSizeZ = 50m


##########################################################
# Annotation parameters                                  #
##########################################################
*.annotations.draw = true

##########################################################
# Obstacle parameters                                    #
##########################################################
*.obstacles.obstacles = xmldoc("config.xml", "//AnalogueModel[@type='SimpleObstacleShadowing']/obstacles")

##########################################################
#            TraCIScenarioManager parameters             #
##########################################################
*.manager.updateInterval = 0.1s
*.manager.host = "localhost"
*.manager.port = 9999
*.manager.autoShutdown = true
*.manager.launchConfig = xmldoc("task_offloading.launchd.xml")

##########################################################
#                       RSU SETTINGS                     #
#                                                        #
#                                                        #
##########################################################
# *.rsu[0].mobility.x = 2000
# *.rsu[0].mobility.y = 2000
# *.rsu[0].mobility.z = 3
#
# *.rsu[*].applType = "RSU"
# *.rsu[*].appl.headerLength = 80 bit
# *.rsu[*].appl.sendBeacons = false
# *.rsu[*].appl.dataOnSch = false
# *.rsu[*].appl.beaconInterval = 1s
# *.rsu[*].appl.beaconUserPriority = 7
# *.rsu[*].appl.dataUserPriority = 5
# *.rsu[*].nic.phy80211p.antennaOffsetZ = 0 m

##########################################################
#            11p specific parameters                     #
#                                                        #
#                    NIC-Settings                        #
##########################################################
*.connectionManager.sendDirect = true
*.connectionManager.maxInterfDist = 2600m
*.connectionManager.drawMaxIntfDist = false

*.**.nic.mac1609_4.useServiceChannel = false

*.**.nic.mac1609_4.txPower = 20mW
*.**.nic.mac1609_4.bitrate = 6Mbps
*.**.nic.phy80211p.minPowerLevel = -82dBm

*.**.nic.phy80211p.useNoiseFloor = true
*.**.nic.phy80211p.noiseFloor = -98dBm

*.**.nic.phy80211p.decider = xmldoc("config.xml")
*.**.nic.phy80211p.analogueModels = xmldoc("config.xml")
*.**.nic.phy80211p.usePropagationDelay = true

*.**.nic.phy80211p.antenna = xmldoc("antenna.xml", "/root/Antenna[@id='monopole']")
*.**[*].nic.phy80211p.antennaOffsetY = 0 m
*.**[*].nic.phy80211p.antennaOffsetZ = 1.895 m

# Specify if the app have to use auto ACKs between the messages
# MAC layer
*.**.nic.mac1609_4.useAcks = ${useAcks = false}
# Application layer
*.veinsApp.useAcks = ${$useAcks}

##########################################################
#                      App Layer                         #
##########################################################
# Match the car and bus modules with the XML .rou file
*.manager.moduleDisplayString = "BEACONER='i=veins/node/car_vs' GENERATOR='i=veins/node/car_vs' WORKER='i=veins/node/car_vs'"
*.manager.moduleType = "BEACONER=task_offloading.app.nodes.BeaconerVehicle GENERATOR=task_offloading.app.nodes.TaskGeneratorVehicle WORKER=task_offloading.app.nodes.WorkerVehicle "
*.manager.moduleName = "BEACONER=beaconer GENERATOR=generator WORKER=worker"

# Common settings shared between cars and buses
# *.**[*].headerLength = 80 bit
*.**[*].dataOnSch = false

# UDPBasicApp
#*.**[*].numApps = 1
*.worker[*].numApps=2
*.generator[*].numApps=1
*.**[*].app[0].interface = "wlan0"
*.worker[*].app[0].typename = "Worker"
*.worker[*].app[1].typename = "TaskGenerator"
*.generator[*].app[0].typename = "TaskGenerator"
*.beaconer[*].app[0].typename = "Beaconer"

# Ieee80211Interface
*.**[*].wlan[0].opMode = "p"
*.**[*].wlan[0].agent.typename = ""
*.**[*].wlan[0].radio.typename = "Ieee80211DimensionalRadio"
*.**[*].wlan[0].radio.bandName = "5.9 GHz"
*.**[*].wlan[0].mgmt.typename = "Ieee80211MgmtAdhoc"
*.**[*].wlan[0].radio.channelNumber = 3
*.**[*].wlan[0].radio.transmitter.power = 20mW
*.**[*].wlan[0].radio.bandwidth = 20 MHz
*.**[*].wlan[0].bitrate = 6Mbps
*.**[*].wlan[0].radio.transmitter.modulation = "QPSK"
*.**[*].wlan[0].radio.transmitter.codeRate = 0.5
*.**[*].wlan[*].radio.antenna.mobility.typename = "AttachedMobility"
*.**[*].wlan[*].radio.antenna.mobility.mobilityModule = "^.^.^.^.mobility"
*.**[*].wlan[*].radio.antenna.mobility.offsetX = -2.5m
*.**[*].wlan[*].radio.antenna.mobility.offsetZ = 1.5m
*.**[*].wlan[*].radio.antenna.mobility.constraintAreaMinX = 0m
*.**[*].wlan[*].radio.antenna.mobility.constraintAreaMaxX = 0m
*.**[*].wlan[*].radio.antenna.mobility.constraintAreaMinY = 0m
*.**[*].wlan[*].radio.antenna.mobility.constraintAreaMaxY = 0m
*.**[*].wlan[*].radio.antenna.mobility.constraintAreaMinZ = 0m
*.**[*].wlan[*].radio.antenna.mobility.constraintAreaMaxZ = 0m
*.**[*].wlan[*].mac.dcf.channelAccess.pendingQueue.packetCapacity = -1

# HostAutoConfigurator
*.**[*].ipv4.configurator.typename = "HostAutoConfigurator"
*.**[*].ipv4.configurator.interfaces = "wlan0"
*.**[*].ipv4.configurator.mcastGroups = "224.0.0.1"

# VeinsInetMobility
*.**[*].mobility.typename = "VeinsInetMobility"

##########################################################
#               Task offloading parameters               #
#                  -- Task generator --                  #
##########################################################
# Time to wait in s for the help request to be sent
*.generator[*].app[0].randomTimeFirstHelpMessage = uniform(30s, 40s)

*.generator[*].app[0].randomTimeHelpRequest = uniform(1s, 2s)

# Time in ms for the generator to wait for ok messages
*.generator[*].app[0].busWaitingTimeForAvailability = uniform(100ms, 200ms)

# Time in s for data computation extra time
*.generator[*].app[0].dataComputationThreshold = uniform(1s, 2s)

# Total computation load for the task generator
#*.generator[*].app[0].computationLoad = ${sG=50kB,500kB,1MB,5MB}
*.generator[*].app[0].computationLoad = 50kB

# Generator load capacity
*.generator[*].app[0].busVehicleLoad = 50kB

# The minimum vehicle load accepted by the bus
*.generator[*].app[0].minimumVehicleLoadRequested = 20kB

# Select sorting algorithm for load balancing
# Types available: FIFO, ComputationTime
*.loadBalancingAlgorithm.typename = "ComputationTime"

# Check if car position in the next aRt seconds is in the new bus range
*.generator[*].app[0].appl.availabilityRangeTime = -1

*.generator[*].app[0].UDPMaxLength = 64kB

##########################################################
#               Task offloading parameters               #
#                      -- Worker --                      #
##########################################################
# These parameters sets the probability of a vehicle to remain available
# after them computation (Piggybacking)
*.worker[*].app[0].stillAvailableProbability = uniform(0, 1)
*.worker[*].app[0].stillAvailableThreshold = 0.5

# The common load of all vehicles except for generator
#*.worker[*].app[0].commonVehicleLoad = ${sW=40kB,400kB,800kB,40MB ! sG}
*.worker[*].app[0].commonVehicleLoad = 100MB
# Time in ms for the ok messages
*.worker[*].app[0].vehicleAvailabilityMessageTime = uniform(0ms, 100ms)

# Time in s for ack message extra time
*.worker[*].app[0].ackMessageThreshold = uniform(300ms, 400ms)

# These parameters are for the current load of a vehicle and the 
# respective CPU frequency
*.worker[*].app[0].randomVehicleFreeLoadPercentage = uniform(0, 1)
*.worker[*].app[0].randomVehicleCpuFreq = uniform(1.20GHz, 2.70GHz)

##########################################################
#               Task offloading parameters               #
#              -- Task Worker Generator --               #
##########################################################
# Time to wait in s for the help request to be sent
*.worker[*].app[1].randomTimeFirstHelpMessage = uniform(40s, 50s)
*.worker[*].app[1].randomTimeHelpRequest = uniform(1s, 2s)

# Time in ms for the generator to wait for ok messages
*.worker[*].app[1].busWaitingTimeForAvailability = uniform(100ms, 200ms)

# Time in s for data computation extra time
*.worker[*].app[1].dataComputationThreshold = uniform(1s, 2s)

# Total computation load for the task generator
*.worker[*].app[1].computationLoad = 50kB

# Generator load capacity
*.worker[*].app[1].busVehicleLoad = 50kB

# The minimum vehicle load accepted by the bus
*.worker[*].app[1].minimumVehicleLoadRequested = 20kB

# Check if car position in the next aRt seconds is in the new bus range
*.worker[*].app[1].appl.availabilityRangeTime = -1

*.worker[*].app[1].UDPMaxLength = 64kB

##########################################################
#                     -- Beaconer --                     #
##########################################################
*.beaconer[*].app[0].sendBeacons = true

# Size of beacon message
*.beaconer[*].app[0].beaconByteLength = 100byte

# Interval between each beacon is sent from the same vehicle
*.beaconer[*].app[0].beaconIntervalTime = uniform(100ms, 200ms)

# Warm-up time to wait so that all vehicles can spawn before sending beacons
*.beaconer[*].app[0].randomWarmupTime = uniform(30s, 40s)

##########################################################
#         -- Shared (Worker-Task Generator) --           #
##########################################################
*.**[*].IOratio = 1
*.**[*].retryFactorTime = 20
# The local port for vehicles communication
*.**[*].localPort = 10020

[Config Default]

[Config WithBeaconing]
# *.rsu[*].appl.sendBeacons = true
*.**[*].appl.sendBeacons = true

[Config WithChannelSwitching]
*.**.nic.mac1609_4.useServiceChannel = true
*.**[*].appl.dataOnSch = true
# *.rsu[*].appl.dataOnSch = true